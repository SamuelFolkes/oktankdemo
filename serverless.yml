service: oktank-serverless-demo

custom:
  stage: ${opt:stage, self:provider.stage}
  region: us-east-1
  memorySize: 512
  userPoolName: oktank-user-pool-${self:custom.stage}
  userPoolClientName: oktank-user-pool-client-${self:custom.stage}
  environmentLower:
    PROD: prod
    DEV: dev
  environment:
    DB_CLUSTER_ARN:
      PROD: "arn:aws:rds:us-east-1:895848145837:cluster:oktankdemo-cluster"
      DEV: "arn:aws:rds:us-east-1:297891556513:cluster:oktankdemo-cluster"
    SECRET_ARN:
      PROD: "arn:aws:secretsmanager:us-east-1:895848145837:secret:DBClusterSecret-FsL5g77Cwsw6-SBwnjV"
      DEV: "arn:aws:secretsmanager:us-east-1:297891556513:secret:DBClusterSecret-SvV13wsKTnEO-Q0tzsX"

provider:
  name: aws
  role: LambdaRole
  cfnRole: ${opt:cfnRoleArn}
  region: ${self:custom.region}
  memorySize: ${self:custom.memorySize}
  tracing:
    lambda: true
  stackTags:
    "project": "AB3"
    "name": "oktank-serverless-demo"
  environment:
    DB_CLUSTER_ARN: ${self:custom.environment.DB_CLUSTER_ARN.${self:custom.stage}}
    SECRET_ARN: ${self:custom.environment.SECRET_ARN.${self:custom.stage}}
    BUCKET_NAME: oktankpets-demo-${self:custom.environmentLower.${self:custom.stage}}
    IDENTIFY_BUCKET_NAME: oktankpets-demo-identify-${self:custom.environmentLower.${self:custom.stage}}
    QUEUE_ARN:
      Fn::GetAtt:
        - SQSQueue
        - Arn
      QUEUE_URL:
        Ref: SQSQueue

package:
  individually: true

functions:
  identify:
    runtime: python3.8
    package:
      artifact: src/util/identify/identify.zip
    handler: identify.lambda_handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn

  resize:
    runtime: python3.8
    package:
      artifact: src/util/resize/dist/resize.zip
    handler: resize.lambda_handler
    events:
      - s3: oktankpets-demo-${self:custom.environmentLower.${self:custom.stage}}

  pets:
    runtime: java8
    handler: com.oktank.demo.StreamLambdaHandler::handleRequest
    package:
      artifact: target/oktankdemo-1.0-lambda-package.zip
    events:
      - http:
          path: /pets
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            scopes:
              - oktank/read
              - oktank/write
            cors:
              origin: '*'
              headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
              allowCredentials: true
      - http:
          path: /pets
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            scopes:
              - oktank/read
              - oktank/write
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
    timeout: 30

#resources
resources:
  Resources:
    IdentifyS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: oktankpets-demo-identify-${self:custom.environmentLower.${self:custom.stage}}
    SQSQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "oktankdemo-queue"
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: LambdaRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: LogsPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: '*'
          - PolicyName: S3Policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:PutObjectAcl
                  Resource: '*'
          - PolicyName: SQSPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes
                  Resource: '*'
          - PolicyName: RekognitionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - rekognition:*
                  Resource: '*'
          - PolicyName: RDSDataPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - rds-data:BatchExecuteStatement
                    - rds-data:BeginTransaction
                    - rds-data:CommitTransaction
                    - rds-data:ExecuteStatement
                    - rds-data:RollbackTransaction
                  Resource: '*'
          - PolicyName: SecretsMgrPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - secretsmanager:GetSecretValue
                  Resource: '*'
          - PolicyName: XRayPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - xray:PutTraceSegments
                    - xray:PutTelemetryRecords
                  Resource: '*'
  Outputs:
    SQSQueueArn:
      Value:
        Fn::GetAtt:
          - SQSQueue
          - Arn
      Export:
        Name: SQSQueueArn-${self:custom.stage}
    CognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
      Export:
        Name: CognitoUserPoolArn-${self:custom.stage}